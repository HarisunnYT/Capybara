Shader "CapyShaderZ"
{
	Properties
	{
		_BaseColor("Base Color", Color) = (1,1,1,0)
		[NoScaleOffset] _BaseMap("Base Map", 2D) = "white" {}
		_ShadedBaseColor("Shaded Base Color", Color) = (0,0,0,1)
		[NoScaleOffset] _ShadedBaseMap("Shaded Base Map", 2D) = "white" {}
		[HDR]_Specular("Specular", Color) = (0.2,0.2,0.2,0)
		_Smoothness("Smoothness ", Range(0, 1)) = 0.5
		_Occlusion("Occlusion ", Range(0, 1)) = 1
		[NoScaleOffset] _BumpMap("Normal Map", 2D) = "bump" {}
		_DiffuseStep("Diffuse Step ", Range(0, 1)) = 0
		_DiffuseFallOff("Diffuse FallOff ", Range(0, 1)) = 0.01
		_SpecularStep("Specular Step ", Range(0.3, 0.5)) = 0.45
		_SpecularFallOff("Specular FallOff ", Range(0, 1)) = 0.01
		_ShadowFallOff("Shadow FallOff ", Range(0, 1)) = 0.01
		_RimPower("Rim Power ", Range(0, 1)) = 0.5
		_RimFallOff("Rim FallOff ", Range(0, 1)) = 1
		_RimColor("Rim Color", Color) = (1,0.9858491,0.9858491,1)
		_RimAttenuation("Rim Attenuation ", Range(0, 1)) = 0

		[Enum(UnityEngine.Rendering.CompareFunction)] _ZTest("ZTest", Int) = 2 // 2 = Less
		_Stencil("Stencil ID", Int) = 2
		[Enum(UnityEngine.Rendering.CompareFunction)] _StencilComp("Stencil Comparison", Int) = 7 // 7 = GreaterEquals
		[Enum(UnityEngine.Rendering.StencilOp)] _StencilOp("Stencil Operation", Int) = 2 // 2 = replace
		[Enum(UnityEngine.Rendering.StencilOp)] _StencilFail("Stencil Fail", Int) = 2 // 2 = replace
		[Enum(UnityEngine.Rendering.StencilOp)] _StencilZFail("Stencil ZFail", Int) = 0 // 0 = keep
		[IntRange] _ReadMask("Read Mask", Range(0, 255)) = 2
		[IntRange] _WriteMask("Write Mask", Range(0, 255)) = 22

		// Blending state
		[HideInInspector] _Surface("__surface", Float) = 0.0
		[HideInInspector] _Blend("__blend", Float) = 0.0
		[HideInInspector] _AlphaClip("__clip", Float) = 0.0
		[HideInInspector] _SrcBlend("__src", Float) = 1.0
		[HideInInspector] _DstBlend("__dst", Float) = 0.0
		[HideInInspector] _ZWrite("__zw", Float) = 1.0
		[HideInInspector] _Cull("__cull", Float) = 2.0

	}
		SubShader
{
	Tags
	{
		"RenderPipeline" = "LightweightPipeline"
		"RenderType" = "Opaque"
		"Queue" = "Geometry+0"
	}
	Pass
	{
		Tags{"LightMode" = "LightweightForward"}

		Stencil {
			Ref[_Stencil]
			ReadMask[_ReadMask]
			WriteMask[_WriteMask]
			Comp[_StencilComp]
			Pass[_StencilOp]
			Fail[_StencilFail]
			ZFail[_StencilZFail]
		}

		Blend[_SrcBlend][_DstBlend]
		ZTest[_ZTest]
		ZWrite[_ZWrite]
		Cull[_Cull]

		HLSLPROGRAM
	// Required to compile gles 2.0 with standard srp library
	#pragma prefer_hlslcc gles
	#pragma exclude_renderers d3d11_9x
	#pragma target 2.0

	// -------------------------------------
	// Lightweight Pipeline keywords
	#pragma multi_compile _ _MAIN_LIGHT_SHADOWS
	#pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
	#pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
	#pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
	#pragma multi_compile _ _SHADOWS_SOFT
	#pragma multi_compile _ _MIXED_LIGHTING_SUBTRACTIVE

	// -------------------------------------
	// Unity defined keywords
	#pragma multi_compile _ DIRLIGHTMAP_COMBINED
	#pragma multi_compile _ LIGHTMAP_ON
	#pragma multi_compile_fog

	//--------------------------------------
	// GPU Instancing
	#pragma multi_compile_instancing

	#pragma vertex vert
	#pragma fragment frag

	// Defines generated by graph
	#define _SPECULAR_SETUP 1

	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"

	CBUFFER_START(UnityPerMaterial)
	float4 _BaseColor;
	float4 _ShadedBaseColor;
	float4 _Specular;
	float _Smoothness;
	float _Occlusion;
	float _DiffuseStep;
	float _DiffuseFallOff;
	float _SpecularStep;
	float _SpecularFallOff;
	float _ShadowFallOff;
	float _RimPower;
	float _RimFallOff;
	float4 _RimColor;
	float _RimAttenuation;
	CBUFFER_END

	TEXTURE2D(_BaseMap); SAMPLER(sampler_BaseMap); float4 _BaseMap_TexelSize;
	TEXTURE2D(_ShadedBaseMap); SAMPLER(sampler_ShadedBaseMap); float4 _ShadedBaseMap_TexelSize;
	TEXTURE2D(_BumpMap); SAMPLER(sampler_BumpMap); float4 _BumpMap_TexelSize;
	SAMPLER(_SampleTexture2D_FAA120A5_Sampler_3_Linear_Repeat);
	SAMPLER(_SampleTexture2D_34761939_Sampler_3_Linear_Repeat);
	SAMPLER(_SampleTexture2D_D7A6F0AB_Sampler_3_Linear_Repeat);
	struct VertexDescriptionInputs
	{
		float3 ObjectSpacePosition;
	};

	struct SurfaceDescriptionInputs
	{
		float3 WorldSpaceNormal;
		float3 TangentSpaceNormal;
		float3 WorldSpaceTangent;
		float3 WorldSpaceBiTangent;
		float3 WorldSpaceViewDirection;
		float3 WorldSpacePosition;
		half4 uv0;
		half4 uv1;
	};


	void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
	{
		Out = A * B;
	}

	// 380c0ca044f14a16d46af7529bdff7bf
	#include "Assets/Lux LWRP Essentials/Shader Graphs/Includes/Lux_Lighting_Toon.hlsl"

	struct Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7
	{
		float3 WorldSpaceNormal;
		float3 WorldSpaceTangent;
		float3 WorldSpaceBiTangent;
		float3 WorldSpaceViewDirection;
		float3 WorldSpacePosition;
	};

	void SG_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7(float3 Vector3_4CA515A4, float3 Vector3_AE241B6C, float4 Color_5426B4B9, float Vector1_D80CA667, float3 Vector3_FFC51F17, float Vector1_3CC2759F, float Vector1_3EC09F1, float Vector1_7D925674, float Vector1_B000244B, float Vector1_4DCF7CEB, float Vector1_D1304BAC, float Vector1_B5087B5E, float Vector1_5A724280, float4 Color_523B3039, float Vector1_B05024D, float2 Vector2_2C223C8B, float Boolean_7F14ACEC, float Boolean_5F39E5C1, float Boolean_83E728FB, float Boolean_C51AC2E9, float Boolean_58D07EF3, Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7 IN, out float3 FinalLighting, out float3 MetaAlbedo, out float3 MetaSpecular)
	{
		float _Property_BB4B7CD6_Out_0 = Boolean_5F39E5C1;
		float3 _Property_D1F66200_Out_0 = Vector3_FFC51F17;
		float3 _Property_403E22D6_Out_0 = Vector3_4CA515A4;
		float3 _Property_825F2A6F_Out_0 = Vector3_AE241B6C;
		float _Property_289EBB8C_Out_0 = Boolean_7F14ACEC;
		float4 _Property_CF9BFC0B_Out_0 = Color_5426B4B9;
		float _Property_A136356D_Out_0 = Vector1_D80CA667;
		float _Property_B73A1CC4_Out_0 = Vector1_3CC2759F;
		float _Property_DE78F476_Out_0 = Vector1_3EC09F1;
		float _Property_197F1F5F_Out_0 = Vector1_7D925674;
		float _Property_B73AA6B5_Out_0 = Vector1_B000244B;
		float _Property_D8401519_Out_0 = Vector1_4DCF7CEB;
		float _Property_A938B7C7_Out_0 = Vector1_D1304BAC;
		float _Property_9A9EABFC_Out_0 = Boolean_C51AC2E9;
		float _Property_D34BBBE6_Out_0 = Boolean_58D07EF3;
		float _Property_E71DCEAF_Out_0 = Boolean_83E728FB;
		float _Property_8F3DAD18_Out_0 = Vector1_B5087B5E;
		float _Property_DCD83B72_Out_0 = Vector1_5A724280;
		float4 _Property_C69A493B_Out_0 = Color_523B3039;
		float _Property_49DE119F_Out_0 = Vector1_B05024D;
		float2 _Property_5CBDCB9_Out_0 = Vector2_2C223C8B;
		float3 _CustomFunction_4F540784_FinalLighting_7;
		float3 _CustomFunction_4F540784_MetaAlbedo_21;
		float3 _CustomFunction_4F540784_MetaSpecular_28;
		Lighting_float(IN.WorldSpacePosition, IN.WorldSpaceViewDirection, IN.WorldSpaceNormal, IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, _Property_BB4B7CD6_Out_0, _Property_D1F66200_Out_0, _Property_403E22D6_Out_0, _Property_825F2A6F_Out_0, _Property_289EBB8C_Out_0, (_Property_CF9BFC0B_Out_0.xyz), _Property_A136356D_Out_0, _Property_B73A1CC4_Out_0, _Property_DE78F476_Out_0, _Property_197F1F5F_Out_0, _Property_B73AA6B5_Out_0, _Property_D8401519_Out_0, _Property_A938B7C7_Out_0, _Property_9A9EABFC_Out_0, _Property_D34BBBE6_Out_0, _Property_E71DCEAF_Out_0, _Property_8F3DAD18_Out_0, _Property_DCD83B72_Out_0, _Property_C69A493B_Out_0, _Property_49DE119F_Out_0, _Property_5CBDCB9_Out_0, _CustomFunction_4F540784_FinalLighting_7, _CustomFunction_4F540784_MetaAlbedo_21, _CustomFunction_4F540784_MetaSpecular_28);
		FinalLighting = _CustomFunction_4F540784_FinalLighting_7;
		MetaAlbedo = _CustomFunction_4F540784_MetaAlbedo_21;
		MetaSpecular = _CustomFunction_4F540784_MetaSpecular_28;
	}

	struct VertexDescription
	{
		float3 Position;
	};

	VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
	{
		VertexDescription description = (VertexDescription)0;
		description.Position = IN.ObjectSpacePosition;
		return description;
	}

	struct SurfaceDescription
	{
		float3 Albedo;
		float3 Normal;
		float3 Emission;
		float3 Specular;
		float Smoothness;
		float Occlusion;
		float Alpha;
		float AlphaClipThreshold;
	};

	SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
	{
		SurfaceDescription surface = (SurfaceDescription)0;
		float4 _Property_B5961ACC_Out_0 = _BaseColor;
		float4 _SampleTexture2D_FAA120A5_RGBA_0 = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, IN.uv0.xy);
		float _SampleTexture2D_FAA120A5_R_4 = _SampleTexture2D_FAA120A5_RGBA_0.r;
		float _SampleTexture2D_FAA120A5_G_5 = _SampleTexture2D_FAA120A5_RGBA_0.g;
		float _SampleTexture2D_FAA120A5_B_6 = _SampleTexture2D_FAA120A5_RGBA_0.b;
		float _SampleTexture2D_FAA120A5_A_7 = _SampleTexture2D_FAA120A5_RGBA_0.a;
		float4 _Multiply_AD02ED7B_Out_2;
		Unity_Multiply_float(_Property_B5961ACC_Out_0, _SampleTexture2D_FAA120A5_RGBA_0, _Multiply_AD02ED7B_Out_2);
		float4 _Property_6D197672_Out_0 = _ShadedBaseColor;
		float4 _SampleTexture2D_34761939_RGBA_0 = SAMPLE_TEXTURE2D(_ShadedBaseMap, sampler_ShadedBaseMap, IN.uv0.xy);
		float _SampleTexture2D_34761939_R_4 = _SampleTexture2D_34761939_RGBA_0.r;
		float _SampleTexture2D_34761939_G_5 = _SampleTexture2D_34761939_RGBA_0.g;
		float _SampleTexture2D_34761939_B_6 = _SampleTexture2D_34761939_RGBA_0.b;
		float _SampleTexture2D_34761939_A_7 = _SampleTexture2D_34761939_RGBA_0.a;
		float4 _Multiply_CAC434DC_Out_2;
		Unity_Multiply_float(_Property_6D197672_Out_0, _SampleTexture2D_34761939_RGBA_0, _Multiply_CAC434DC_Out_2);
		float4 _Property_6C34BDFC_Out_0 = _Specular;
		float _Property_3F292CE9_Out_0 = _Smoothness;
		float4 _SampleTexture2D_D7A6F0AB_RGBA_0 = SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, IN.uv0.xy);
		_SampleTexture2D_D7A6F0AB_RGBA_0.rgb = UnpackNormalmapRGorAG(_SampleTexture2D_D7A6F0AB_RGBA_0);
		float _SampleTexture2D_D7A6F0AB_R_4 = _SampleTexture2D_D7A6F0AB_RGBA_0.r;
		float _SampleTexture2D_D7A6F0AB_G_5 = _SampleTexture2D_D7A6F0AB_RGBA_0.g;
		float _SampleTexture2D_D7A6F0AB_B_6 = _SampleTexture2D_D7A6F0AB_RGBA_0.b;
		float _SampleTexture2D_D7A6F0AB_A_7 = _SampleTexture2D_D7A6F0AB_RGBA_0.a;
		float _Property_91FF9194_Out_0 = _Occlusion;
		float _Property_2E5633FC_Out_0 = _DiffuseStep;
		float _Property_2BE42D52_Out_0 = _DiffuseFallOff;
		float _Property_D538AAD0_Out_0 = _SpecularStep;
		float _Property_2A792309_Out_0 = _SpecularFallOff;
		float _Property_7BB7BFBC_Out_0 = _ShadowFallOff;
		float _Property_FD04C19D_Out_0 = _RimPower;
		float _Property_179009DB_Out_0 = _RimFallOff;
		float4 _Property_A90FCED5_Out_0 = _RimColor;
		float _Property_F4C1F8F3_Out_0 = _RimAttenuation;
		float4 _UV_4E203FAD_Out_0 = IN.uv1;
		float Boolean_7A0C6EC7 = 1;
		float Boolean_ADA6D057 = 1;
		float Boolean_F162211B = 1;
		float Boolean_2D0C1B91 = 0;
		float Boolean_3141EC09 = 0;
		Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7 _LuxLWRPToonLighting_56B90218;
		_LuxLWRPToonLighting_56B90218.WorldSpaceNormal = IN.WorldSpaceNormal;
		_LuxLWRPToonLighting_56B90218.WorldSpaceTangent = IN.WorldSpaceTangent;
		_LuxLWRPToonLighting_56B90218.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
		_LuxLWRPToonLighting_56B90218.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
		_LuxLWRPToonLighting_56B90218.WorldSpacePosition = IN.WorldSpacePosition;
		float3 _LuxLWRPToonLighting_56B90218_FinalLighting_1;
		float3 _LuxLWRPToonLighting_56B90218_MetaAlbedo_2;
		float3 _LuxLWRPToonLighting_56B90218_MetaSpecular_3;
		SG_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7((_Multiply_AD02ED7B_Out_2.xyz), (_Multiply_CAC434DC_Out_2.xyz), _Property_6C34BDFC_Out_0, _Property_3F292CE9_Out_0, (_SampleTexture2D_D7A6F0AB_RGBA_0.xyz), _Property_91FF9194_Out_0, _Property_2E5633FC_Out_0, _Property_2BE42D52_Out_0, _Property_D538AAD0_Out_0, _Property_2A792309_Out_0, _Property_7BB7BFBC_Out_0, _Property_FD04C19D_Out_0, _Property_179009DB_Out_0, _Property_A90FCED5_Out_0, _Property_F4C1F8F3_Out_0, (_UV_4E203FAD_Out_0.xy), Boolean_7A0C6EC7, Boolean_ADA6D057, Boolean_F162211B, Boolean_2D0C1B91, Boolean_3141EC09, _LuxLWRPToonLighting_56B90218, _LuxLWRPToonLighting_56B90218_FinalLighting_1, _LuxLWRPToonLighting_56B90218_MetaAlbedo_2, _LuxLWRPToonLighting_56B90218_MetaSpecular_3);
		surface.Albedo = _LuxLWRPToonLighting_56B90218_MetaAlbedo_2;
		surface.Normal = IN.TangentSpaceNormal;
		surface.Emission = _LuxLWRPToonLighting_56B90218_FinalLighting_1;
		surface.Specular = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
		surface.Smoothness = 0;
		surface.Occlusion = 0;
		surface.Alpha = 1;
		surface.AlphaClipThreshold = 0;
		return surface;
	}

	struct GraphVertexInput
	{
		float4 vertex : POSITION;
		float3 normal : NORMAL;
		float4 tangent : TANGENT;
		float4 texcoord0 : TEXCOORD0;
		float4 texcoord1 : TEXCOORD1;
		UNITY_VERTEX_INPUT_INSTANCE_ID
	};


	struct GraphVertexOutput
	{
		float4 clipPos                : SV_POSITION;
		DECLARE_LIGHTMAP_OR_SH(lightmapUV, vertexSH, 0);
		half4 fogFactorAndVertexLight : TEXCOORD1; // x: fogFactor, yzw: vertex light
		float4 shadowCoord            : TEXCOORD2;

		// Interpolators defined by graph
		float3 WorldSpacePosition : TEXCOORD3;
		float3 WorldSpaceNormal : TEXCOORD4;
		float3 WorldSpaceTangent : TEXCOORD5;
		float3 WorldSpaceBiTangent : TEXCOORD6;
		float3 WorldSpaceViewDirection : TEXCOORD7;
		half4 uv0 : TEXCOORD8;
		half4 uv1 : TEXCOORD9;

		UNITY_VERTEX_INPUT_INSTANCE_ID
		UNITY_VERTEX_OUTPUT_STEREO
	};

	GraphVertexOutput vert(GraphVertexInput v)
	{
		GraphVertexOutput o = (GraphVertexOutput)0;
		UNITY_SETUP_INSTANCE_ID(v);
		UNITY_TRANSFER_INSTANCE_ID(v, o);
		UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

		// Vertex transformations performed by graph
		float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
		float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
		float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
		float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
		float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
		float4 uv0 = v.texcoord0;
		float4 uv1 = v.texcoord1;
		float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

		VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

		// Vertex description inputs defined by graph
		vdi.ObjectSpacePosition = ObjectSpacePosition;

		VertexDescription vd = PopulateVertexData(vdi);
		v.vertex.xyz = vd.Position;

		// Vertex shader outputs defined by graph
		o.WorldSpacePosition = WorldSpacePosition;
		o.WorldSpaceNormal = WorldSpaceNormal;
		o.WorldSpaceTangent = WorldSpaceTangent;
		o.WorldSpaceBiTangent = WorldSpaceBiTangent;
		o.WorldSpaceViewDirection = WorldSpaceViewDirection;
		o.uv0 = uv0;
		o.uv1 = uv1;

		float3 lwWNormal = TransformObjectToWorldNormal(v.normal);

		VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);

		// We either sample GI from lightmap or SH.
		// Lightmap UV and vertex SH coefficients use the same interpolator ("float2 lightmapUV" for lightmap or "half3 vertexSH" for SH)
		// see DECLARE_LIGHTMAP_OR_SH macro.
		// The following funcions initialize the correct variable with correct data
		OUTPUT_LIGHTMAP_UV(v.texcoord1, unity_LightmapST, o.lightmapUV);
		OUTPUT_SH(lwWNormal, o.vertexSH);

		half3 vertexLight = VertexLighting(vertexInput.positionWS, lwWNormal);
		half fogFactor = ComputeFogFactor(vertexInput.positionCS.z);
		o.fogFactorAndVertexLight = half4(fogFactor, vertexLight);
		o.clipPos = vertexInput.positionCS;

	#ifdef _MAIN_LIGHT_SHADOWS
		o.shadowCoord = GetShadowCoord(vertexInput);
	#endif
		return o;
	}

	half4 frag(GraphVertexOutput IN) : SV_Target
	{
		UNITY_SETUP_INSTANCE_ID(IN);
		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

		// Pixel transformations performed by graph
		float3 WorldSpacePosition = IN.WorldSpacePosition;
		float3 WorldSpaceNormal = IN.WorldSpaceNormal;
		float3 WorldSpaceTangent = IN.WorldSpaceTangent;
		float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
		float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
		float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
		float4 uv0 = IN.uv0;
		float4 uv1 = IN.uv1;
		float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

		SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

		// Surface description inputs defined by graph
		surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
		surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
		surfaceInput.WorldSpaceTangent = WorldSpaceTangent;
		surfaceInput.WorldSpaceBiTangent = WorldSpaceBiTangent;
		surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
		surfaceInput.WorldSpacePosition = WorldSpacePosition;
		surfaceInput.uv0 = uv0;
		surfaceInput.uv1 = uv1;

		SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

		float3 Albedo = float3(0.5, 0.5, 0.5);
		float3 Specular = float3(0, 0, 0);
		float Metallic = 1;
		float3 Normal = float3(0, 0, 1);
		float3 Emission = 0;
		float Smoothness = 0.5;
		float Occlusion = 1;
		float Alpha = 1;
		float AlphaClipThreshold = 0;

		// Surface description remap performed by graph
		Albedo = surf.Albedo;
		Normal = surf.Normal;
		Emission = surf.Emission;
		Specular = surf.Specular;
		Smoothness = surf.Smoothness;
		Occlusion = surf.Occlusion;
		Alpha = surf.Alpha;
		AlphaClipThreshold = surf.AlphaClipThreshold;

		InputData inputData;
		inputData.positionWS = WorldSpacePosition;

#ifdef _NORMALMAP
		inputData.normalWS = normalize(TransformTangentToWorld(Normal, half3x3(WorldSpaceTangent, WorldSpaceBiTangent, WorldSpaceNormal)));
#else
	#if !SHADER_HINT_NICE_QUALITY
		inputData.normalWS = WorldSpaceNormal;
	#else
		inputData.normalWS = normalize(WorldSpaceNormal);
	#endif
#endif

#if !SHADER_HINT_NICE_QUALITY
		// viewDirection should be normalized here, but we avoid doing it as it's close enough and we save some ALU.
		inputData.viewDirectionWS = WorldSpaceViewDirection;
#else
		inputData.viewDirectionWS = normalize(WorldSpaceViewDirection);
#endif

		inputData.shadowCoord = IN.shadowCoord;

		inputData.fogCoord = IN.fogFactorAndVertexLight.x;
		inputData.vertexLighting = IN.fogFactorAndVertexLight.yzw;
		inputData.bakedGI = SAMPLE_GI(IN.lightmapUV, IN.vertexSH, inputData.normalWS);

		half4 color = LightweightFragmentPBR(
			inputData,
			Albedo,
			Metallic,
			Specular,
			Smoothness,
			Occlusion,
			Emission,
			Alpha);

		// Computes fog factor per-vertex
		color.rgb = MixFog(color.rgb, IN.fogFactorAndVertexLight.x);

#if _AlphaClip
		clip(Alpha - AlphaClipThreshold);
#endif
		return color;
	}

	ENDHLSL
}
Pass
{
	Name "ShadowCaster"
	Tags{"LightMode" = "ShadowCaster"}

	ZWrite On
	ZTest[_ZTest]
	Cull[_Cull]

		// Material options generated by graph
		Cull Back

		HLSLPROGRAM
		// Required to compile gles 2.0 with standard srp library
		#pragma prefer_hlslcc gles
		#pragma exclude_renderers d3d11_9x
		#pragma target 2.0

		//--------------------------------------
		// GPU Instancing
		#pragma multi_compile_instancing

		#pragma vertex ShadowPassVertex
		#pragma fragment ShadowPassFragment

		// Defines generated by graph
		#define _SPECULAR_SETUP 1

		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

		CBUFFER_START(UnityPerMaterial)
		float4 _BaseColor;
		float4 _ShadedBaseColor;
		float4 _Specular;
		float _Smoothness;
		float _Occlusion;
		float _DiffuseStep;
		float _DiffuseFallOff;
		float _SpecularStep;
		float _SpecularFallOff;
		float _ShadowFallOff;
		float _RimPower;
		float _RimFallOff;
		float4 _RimColor;
		float _RimAttenuation;
		CBUFFER_END

		TEXTURE2D(_BaseMap); SAMPLER(sampler_BaseMap); float4 _BaseMap_TexelSize;
		TEXTURE2D(_ShadedBaseMap); SAMPLER(sampler_ShadedBaseMap); float4 _ShadedBaseMap_TexelSize;
		TEXTURE2D(_BumpMap); SAMPLER(sampler_BumpMap); float4 _BumpMap_TexelSize;
		SAMPLER(_SampleTexture2D_FAA120A5_Sampler_3_Linear_Repeat);
		SAMPLER(_SampleTexture2D_34761939_Sampler_3_Linear_Repeat);
		SAMPLER(_SampleTexture2D_D7A6F0AB_Sampler_3_Linear_Repeat);
		struct VertexDescriptionInputs
		{
			float3 ObjectSpacePosition;
		};

		struct SurfaceDescriptionInputs
		{
			float3 WorldSpaceNormal;
			float3 TangentSpaceNormal;
			float3 WorldSpaceTangent;
			float3 WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection;
			float3 WorldSpacePosition;
			half4 uv0;
			half4 uv1;
		};


		void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
		{
			Out = A * B;
		}

		// 380c0ca044f14a16d46af7529bdff7bf
		#include "Assets/Lux LWRP Essentials/Shader Graphs/Includes/Lux_Lighting_Toon.hlsl"

		struct Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7
		{
			float3 WorldSpaceNormal;
			float3 WorldSpaceTangent;
			float3 WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection;
			float3 WorldSpacePosition;
		};

		void SG_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7(float3 Vector3_4CA515A4, float3 Vector3_AE241B6C, float4 Color_5426B4B9, float Vector1_D80CA667, float3 Vector3_FFC51F17, float Vector1_3CC2759F, float Vector1_3EC09F1, float Vector1_7D925674, float Vector1_B000244B, float Vector1_4DCF7CEB, float Vector1_D1304BAC, float Vector1_B5087B5E, float Vector1_5A724280, float4 Color_523B3039, float Vector1_B05024D, float2 Vector2_2C223C8B, float Boolean_7F14ACEC, float Boolean_5F39E5C1, float Boolean_83E728FB, float Boolean_C51AC2E9, float Boolean_58D07EF3, Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7 IN, out float3 FinalLighting, out float3 MetaAlbedo, out float3 MetaSpecular)
		{
			float _Property_BB4B7CD6_Out_0 = Boolean_5F39E5C1;
			float3 _Property_D1F66200_Out_0 = Vector3_FFC51F17;
			float3 _Property_403E22D6_Out_0 = Vector3_4CA515A4;
			float3 _Property_825F2A6F_Out_0 = Vector3_AE241B6C;
			float _Property_289EBB8C_Out_0 = Boolean_7F14ACEC;
			float4 _Property_CF9BFC0B_Out_0 = Color_5426B4B9;
			float _Property_A136356D_Out_0 = Vector1_D80CA667;
			float _Property_B73A1CC4_Out_0 = Vector1_3CC2759F;
			float _Property_DE78F476_Out_0 = Vector1_3EC09F1;
			float _Property_197F1F5F_Out_0 = Vector1_7D925674;
			float _Property_B73AA6B5_Out_0 = Vector1_B000244B;
			float _Property_D8401519_Out_0 = Vector1_4DCF7CEB;
			float _Property_A938B7C7_Out_0 = Vector1_D1304BAC;
			float _Property_9A9EABFC_Out_0 = Boolean_C51AC2E9;
			float _Property_D34BBBE6_Out_0 = Boolean_58D07EF3;
			float _Property_E71DCEAF_Out_0 = Boolean_83E728FB;
			float _Property_8F3DAD18_Out_0 = Vector1_B5087B5E;
			float _Property_DCD83B72_Out_0 = Vector1_5A724280;
			float4 _Property_C69A493B_Out_0 = Color_523B3039;
			float _Property_49DE119F_Out_0 = Vector1_B05024D;
			float2 _Property_5CBDCB9_Out_0 = Vector2_2C223C8B;
			float3 _CustomFunction_4F540784_FinalLighting_7;
			float3 _CustomFunction_4F540784_MetaAlbedo_21;
			float3 _CustomFunction_4F540784_MetaSpecular_28;
			Lighting_float(IN.WorldSpacePosition, IN.WorldSpaceViewDirection, IN.WorldSpaceNormal, IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, _Property_BB4B7CD6_Out_0, _Property_D1F66200_Out_0, _Property_403E22D6_Out_0, _Property_825F2A6F_Out_0, _Property_289EBB8C_Out_0, (_Property_CF9BFC0B_Out_0.xyz), _Property_A136356D_Out_0, _Property_B73A1CC4_Out_0, _Property_DE78F476_Out_0, _Property_197F1F5F_Out_0, _Property_B73AA6B5_Out_0, _Property_D8401519_Out_0, _Property_A938B7C7_Out_0, _Property_9A9EABFC_Out_0, _Property_D34BBBE6_Out_0, _Property_E71DCEAF_Out_0, _Property_8F3DAD18_Out_0, _Property_DCD83B72_Out_0, _Property_C69A493B_Out_0, _Property_49DE119F_Out_0, _Property_5CBDCB9_Out_0, _CustomFunction_4F540784_FinalLighting_7, _CustomFunction_4F540784_MetaAlbedo_21, _CustomFunction_4F540784_MetaSpecular_28);
			FinalLighting = _CustomFunction_4F540784_FinalLighting_7;
			MetaAlbedo = _CustomFunction_4F540784_MetaAlbedo_21;
			MetaSpecular = _CustomFunction_4F540784_MetaSpecular_28;
		}

		struct VertexDescription
		{
			float3 Position;
		};

		VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
		{
			VertexDescription description = (VertexDescription)0;
			description.Position = IN.ObjectSpacePosition;
			return description;
		}

		struct SurfaceDescription
		{
			float3 Albedo;
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
		};

		SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
		{
			SurfaceDescription surface = (SurfaceDescription)0;
			float4 _Property_B5961ACC_Out_0 = _BaseColor;
			float4 _SampleTexture2D_FAA120A5_RGBA_0 = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, IN.uv0.xy);
			float _SampleTexture2D_FAA120A5_R_4 = _SampleTexture2D_FAA120A5_RGBA_0.r;
			float _SampleTexture2D_FAA120A5_G_5 = _SampleTexture2D_FAA120A5_RGBA_0.g;
			float _SampleTexture2D_FAA120A5_B_6 = _SampleTexture2D_FAA120A5_RGBA_0.b;
			float _SampleTexture2D_FAA120A5_A_7 = _SampleTexture2D_FAA120A5_RGBA_0.a;
			float4 _Multiply_AD02ED7B_Out_2;
			Unity_Multiply_float(_Property_B5961ACC_Out_0, _SampleTexture2D_FAA120A5_RGBA_0, _Multiply_AD02ED7B_Out_2);
			float4 _Property_6D197672_Out_0 = _ShadedBaseColor;
			float4 _SampleTexture2D_34761939_RGBA_0 = SAMPLE_TEXTURE2D(_ShadedBaseMap, sampler_ShadedBaseMap, IN.uv0.xy);
			float _SampleTexture2D_34761939_R_4 = _SampleTexture2D_34761939_RGBA_0.r;
			float _SampleTexture2D_34761939_G_5 = _SampleTexture2D_34761939_RGBA_0.g;
			float _SampleTexture2D_34761939_B_6 = _SampleTexture2D_34761939_RGBA_0.b;
			float _SampleTexture2D_34761939_A_7 = _SampleTexture2D_34761939_RGBA_0.a;
			float4 _Multiply_CAC434DC_Out_2;
			Unity_Multiply_float(_Property_6D197672_Out_0, _SampleTexture2D_34761939_RGBA_0, _Multiply_CAC434DC_Out_2);
			float4 _Property_6C34BDFC_Out_0 = _Specular;
			float _Property_3F292CE9_Out_0 = _Smoothness;
			float4 _SampleTexture2D_D7A6F0AB_RGBA_0 = SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, IN.uv0.xy);
			_SampleTexture2D_D7A6F0AB_RGBA_0.rgb = UnpackNormalmapRGorAG(_SampleTexture2D_D7A6F0AB_RGBA_0);
			float _SampleTexture2D_D7A6F0AB_R_4 = _SampleTexture2D_D7A6F0AB_RGBA_0.r;
			float _SampleTexture2D_D7A6F0AB_G_5 = _SampleTexture2D_D7A6F0AB_RGBA_0.g;
			float _SampleTexture2D_D7A6F0AB_B_6 = _SampleTexture2D_D7A6F0AB_RGBA_0.b;
			float _SampleTexture2D_D7A6F0AB_A_7 = _SampleTexture2D_D7A6F0AB_RGBA_0.a;
			float _Property_91FF9194_Out_0 = _Occlusion;
			float _Property_2E5633FC_Out_0 = _DiffuseStep;
			float _Property_2BE42D52_Out_0 = _DiffuseFallOff;
			float _Property_D538AAD0_Out_0 = _SpecularStep;
			float _Property_2A792309_Out_0 = _SpecularFallOff;
			float _Property_7BB7BFBC_Out_0 = _ShadowFallOff;
			float _Property_FD04C19D_Out_0 = _RimPower;
			float _Property_179009DB_Out_0 = _RimFallOff;
			float4 _Property_A90FCED5_Out_0 = _RimColor;
			float _Property_F4C1F8F3_Out_0 = _RimAttenuation;
			float4 _UV_4E203FAD_Out_0 = IN.uv1;
			float Boolean_7A0C6EC7 = 1;
			float Boolean_ADA6D057 = 1;
			float Boolean_F162211B = 1;
			float Boolean_2D0C1B91 = 0;
			float Boolean_3141EC09 = 0;
			Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7 _LuxLWRPToonLighting_56B90218;
			_LuxLWRPToonLighting_56B90218.WorldSpaceNormal = IN.WorldSpaceNormal;
			_LuxLWRPToonLighting_56B90218.WorldSpaceTangent = IN.WorldSpaceTangent;
			_LuxLWRPToonLighting_56B90218.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
			_LuxLWRPToonLighting_56B90218.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
			_LuxLWRPToonLighting_56B90218.WorldSpacePosition = IN.WorldSpacePosition;
			float3 _LuxLWRPToonLighting_56B90218_FinalLighting_1;
			float3 _LuxLWRPToonLighting_56B90218_MetaAlbedo_2;
			float3 _LuxLWRPToonLighting_56B90218_MetaSpecular_3;
			SG_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7((_Multiply_AD02ED7B_Out_2.xyz), (_Multiply_CAC434DC_Out_2.xyz), _Property_6C34BDFC_Out_0, _Property_3F292CE9_Out_0, (_SampleTexture2D_D7A6F0AB_RGBA_0.xyz), _Property_91FF9194_Out_0, _Property_2E5633FC_Out_0, _Property_2BE42D52_Out_0, _Property_D538AAD0_Out_0, _Property_2A792309_Out_0, _Property_7BB7BFBC_Out_0, _Property_FD04C19D_Out_0, _Property_179009DB_Out_0, _Property_A90FCED5_Out_0, _Property_F4C1F8F3_Out_0, (_UV_4E203FAD_Out_0.xy), Boolean_7A0C6EC7, Boolean_ADA6D057, Boolean_F162211B, Boolean_2D0C1B91, Boolean_3141EC09, _LuxLWRPToonLighting_56B90218, _LuxLWRPToonLighting_56B90218_FinalLighting_1, _LuxLWRPToonLighting_56B90218_MetaAlbedo_2, _LuxLWRPToonLighting_56B90218_MetaSpecular_3);
			surface.Albedo = _LuxLWRPToonLighting_56B90218_MetaAlbedo_2;
			surface.Emission = _LuxLWRPToonLighting_56B90218_FinalLighting_1;
			surface.Alpha = 1;
			surface.AlphaClipThreshold = 0;
			return surface;
		}

		struct GraphVertexInput
		{
			float4 vertex : POSITION;
			float3 normal : NORMAL;
			float4 tangent : TANGENT;
			float4 texcoord0 : TEXCOORD0;
			float4 texcoord1 : TEXCOORD1;
			UNITY_VERTEX_INPUT_INSTANCE_ID
		};


		struct VertexOutput
		{
			float2 uv           : TEXCOORD0;
			float4 clipPos      : SV_POSITION;
			// Interpolators defined by graph
			float3 WorldSpacePosition : TEXCOORD3;
			float3 WorldSpaceNormal : TEXCOORD4;
			float3 WorldSpaceTangent : TEXCOORD5;
			float3 WorldSpaceBiTangent : TEXCOORD6;
			float3 WorldSpaceViewDirection : TEXCOORD7;
			half4 uv0 : TEXCOORD8;
			half4 uv1 : TEXCOORD9;

			UNITY_VERTEX_INPUT_INSTANCE_ID
		};

		float3 _LightDirection;

		VertexOutput ShadowPassVertex(GraphVertexInput v)
		{
			VertexOutput o;
			UNITY_SETUP_INSTANCE_ID(v);
			UNITY_TRANSFER_INSTANCE_ID(v, o);

			// Vertex transformations performed by graph
			float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
			float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
			float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
			float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
			float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
			float4 uv0 = v.texcoord0;
			float4 uv1 = v.texcoord1;
			float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

			VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

			// Vertex description inputs defined by graph
			vdi.ObjectSpacePosition = ObjectSpacePosition;

			VertexDescription vd = PopulateVertexData(vdi);
			v.vertex.xyz = vd.Position;

			// Vertex shader outputs defined by graph
			o.WorldSpacePosition = WorldSpacePosition;
			o.WorldSpaceNormal = WorldSpaceNormal;
			o.WorldSpaceTangent = WorldSpaceTangent;
			o.WorldSpaceBiTangent = WorldSpaceBiTangent;
			o.WorldSpaceViewDirection = WorldSpaceViewDirection;
			o.uv0 = uv0;
			o.uv1 = uv1;


			float3 positionWS = TransformObjectToWorld(v.vertex.xyz);
			float3 normalWS = TransformObjectToWorldNormal(v.normal);

			float4 clipPos = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, _LightDirection));

		#if UNITY_REVERSED_Z
			clipPos.z = min(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
		#else
			clipPos.z = max(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
		#endif
			o.clipPos = clipPos;

			return o;
		}

		half4 ShadowPassFragment(VertexOutput IN) : SV_TARGET
		{
			UNITY_SETUP_INSTANCE_ID(IN);

		// Pixel transformations performed by graph
		float3 WorldSpacePosition = IN.WorldSpacePosition;
		float3 WorldSpaceNormal = IN.WorldSpaceNormal;
		float3 WorldSpaceTangent = IN.WorldSpaceTangent;
		float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
		float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
		float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
		float4 uv0 = IN.uv0;
		float4 uv1 = IN.uv1;
		float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

		SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

		// Surface description inputs defined by graph
		surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
		surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
		surfaceInput.WorldSpaceTangent = WorldSpaceTangent;
		surfaceInput.WorldSpaceBiTangent = WorldSpaceBiTangent;
		surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
		surfaceInput.WorldSpacePosition = WorldSpacePosition;
		surfaceInput.uv0 = uv0;
		surfaceInput.uv1 = uv1;

		SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

		float3 Albedo = float3(0.5, 0.5, 0.5);
		float3 Emission = 0;
		float Alpha = 1;
		float AlphaClipThreshold = 0;

		// Surface description remap performed by graph
		Albedo = surf.Albedo;
		Emission = surf.Emission;
		Alpha = surf.Alpha;
		AlphaClipThreshold = surf.AlphaClipThreshold;

 #if _AlphaClip
		clip(Alpha - AlphaClipThreshold);
#endif
		return 0;
	}

	ENDHLSL
}

Pass
{
	Name "DepthOnly"
	Tags{"LightMode" = "DepthOnly"}

	ZWrite On
	ZTest[_ZTest]
	ColorMask 0
	Cull[_Cull]

		HLSLPROGRAM
		// Required to compile gles 2.0 with standard srp library
		#pragma prefer_hlslcc gles
		#pragma exclude_renderers d3d11_9x
		#pragma target 2.0

		//--------------------------------------
		// GPU Instancing
		#pragma multi_compile_instancing

		#pragma vertex vert
		#pragma fragment frag

		// Defines generated by graph
		#define _SPECULAR_SETUP 1

		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

		CBUFFER_START(UnityPerMaterial)
		float4 _BaseColor;
		float4 _ShadedBaseColor;
		float4 _Specular;
		float _Smoothness;
		float _Occlusion;
		float _DiffuseStep;
		float _DiffuseFallOff;
		float _SpecularStep;
		float _SpecularFallOff;
		float _ShadowFallOff;
		float _RimPower;
		float _RimFallOff;
		float4 _RimColor;
		float _RimAttenuation;
		CBUFFER_END

		TEXTURE2D(_BaseMap); SAMPLER(sampler_BaseMap); float4 _BaseMap_TexelSize;
		TEXTURE2D(_ShadedBaseMap); SAMPLER(sampler_ShadedBaseMap); float4 _ShadedBaseMap_TexelSize;
		TEXTURE2D(_BumpMap); SAMPLER(sampler_BumpMap); float4 _BumpMap_TexelSize;
		SAMPLER(_SampleTexture2D_FAA120A5_Sampler_3_Linear_Repeat);
		SAMPLER(_SampleTexture2D_34761939_Sampler_3_Linear_Repeat);
		SAMPLER(_SampleTexture2D_D7A6F0AB_Sampler_3_Linear_Repeat);
		struct VertexDescriptionInputs
		{
			float3 ObjectSpacePosition;
		};

		struct SurfaceDescriptionInputs
		{
			float3 WorldSpaceNormal;
			float3 TangentSpaceNormal;
			float3 WorldSpaceTangent;
			float3 WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection;
			float3 WorldSpacePosition;
			half4 uv0;
			half4 uv1;
		};


		void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
		{
			Out = A * B;
		}

		// 380c0ca044f14a16d46af7529bdff7bf
		#include "Assets/Lux LWRP Essentials/Shader Graphs/Includes/Lux_Lighting_Toon.hlsl"

		struct Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7
		{
			float3 WorldSpaceNormal;
			float3 WorldSpaceTangent;
			float3 WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection;
			float3 WorldSpacePosition;
		};

		void SG_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7(float3 Vector3_4CA515A4, float3 Vector3_AE241B6C, float4 Color_5426B4B9, float Vector1_D80CA667, float3 Vector3_FFC51F17, float Vector1_3CC2759F, float Vector1_3EC09F1, float Vector1_7D925674, float Vector1_B000244B, float Vector1_4DCF7CEB, float Vector1_D1304BAC, float Vector1_B5087B5E, float Vector1_5A724280, float4 Color_523B3039, float Vector1_B05024D, float2 Vector2_2C223C8B, float Boolean_7F14ACEC, float Boolean_5F39E5C1, float Boolean_83E728FB, float Boolean_C51AC2E9, float Boolean_58D07EF3, Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7 IN, out float3 FinalLighting, out float3 MetaAlbedo, out float3 MetaSpecular)
		{
			float _Property_BB4B7CD6_Out_0 = Boolean_5F39E5C1;
			float3 _Property_D1F66200_Out_0 = Vector3_FFC51F17;
			float3 _Property_403E22D6_Out_0 = Vector3_4CA515A4;
			float3 _Property_825F2A6F_Out_0 = Vector3_AE241B6C;
			float _Property_289EBB8C_Out_0 = Boolean_7F14ACEC;
			float4 _Property_CF9BFC0B_Out_0 = Color_5426B4B9;
			float _Property_A136356D_Out_0 = Vector1_D80CA667;
			float _Property_B73A1CC4_Out_0 = Vector1_3CC2759F;
			float _Property_DE78F476_Out_0 = Vector1_3EC09F1;
			float _Property_197F1F5F_Out_0 = Vector1_7D925674;
			float _Property_B73AA6B5_Out_0 = Vector1_B000244B;
			float _Property_D8401519_Out_0 = Vector1_4DCF7CEB;
			float _Property_A938B7C7_Out_0 = Vector1_D1304BAC;
			float _Property_9A9EABFC_Out_0 = Boolean_C51AC2E9;
			float _Property_D34BBBE6_Out_0 = Boolean_58D07EF3;
			float _Property_E71DCEAF_Out_0 = Boolean_83E728FB;
			float _Property_8F3DAD18_Out_0 = Vector1_B5087B5E;
			float _Property_DCD83B72_Out_0 = Vector1_5A724280;
			float4 _Property_C69A493B_Out_0 = Color_523B3039;
			float _Property_49DE119F_Out_0 = Vector1_B05024D;
			float2 _Property_5CBDCB9_Out_0 = Vector2_2C223C8B;
			float3 _CustomFunction_4F540784_FinalLighting_7;
			float3 _CustomFunction_4F540784_MetaAlbedo_21;
			float3 _CustomFunction_4F540784_MetaSpecular_28;
			Lighting_float(IN.WorldSpacePosition, IN.WorldSpaceViewDirection, IN.WorldSpaceNormal, IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, _Property_BB4B7CD6_Out_0, _Property_D1F66200_Out_0, _Property_403E22D6_Out_0, _Property_825F2A6F_Out_0, _Property_289EBB8C_Out_0, (_Property_CF9BFC0B_Out_0.xyz), _Property_A136356D_Out_0, _Property_B73A1CC4_Out_0, _Property_DE78F476_Out_0, _Property_197F1F5F_Out_0, _Property_B73AA6B5_Out_0, _Property_D8401519_Out_0, _Property_A938B7C7_Out_0, _Property_9A9EABFC_Out_0, _Property_D34BBBE6_Out_0, _Property_E71DCEAF_Out_0, _Property_8F3DAD18_Out_0, _Property_DCD83B72_Out_0, _Property_C69A493B_Out_0, _Property_49DE119F_Out_0, _Property_5CBDCB9_Out_0, _CustomFunction_4F540784_FinalLighting_7, _CustomFunction_4F540784_MetaAlbedo_21, _CustomFunction_4F540784_MetaSpecular_28);
			FinalLighting = _CustomFunction_4F540784_FinalLighting_7;
			MetaAlbedo = _CustomFunction_4F540784_MetaAlbedo_21;
			MetaSpecular = _CustomFunction_4F540784_MetaSpecular_28;
		}

		struct VertexDescription
		{
			float3 Position;
		};

		VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
		{
			VertexDescription description = (VertexDescription)0;
			description.Position = IN.ObjectSpacePosition;
			return description;
		}

		struct SurfaceDescription
		{
			float3 Albedo;
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
		};

		SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
		{
			SurfaceDescription surface = (SurfaceDescription)0;
			float4 _Property_B5961ACC_Out_0 = _BaseColor;
			float4 _SampleTexture2D_FAA120A5_RGBA_0 = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, IN.uv0.xy);
			float _SampleTexture2D_FAA120A5_R_4 = _SampleTexture2D_FAA120A5_RGBA_0.r;
			float _SampleTexture2D_FAA120A5_G_5 = _SampleTexture2D_FAA120A5_RGBA_0.g;
			float _SampleTexture2D_FAA120A5_B_6 = _SampleTexture2D_FAA120A5_RGBA_0.b;
			float _SampleTexture2D_FAA120A5_A_7 = _SampleTexture2D_FAA120A5_RGBA_0.a;
			float4 _Multiply_AD02ED7B_Out_2;
			Unity_Multiply_float(_Property_B5961ACC_Out_0, _SampleTexture2D_FAA120A5_RGBA_0, _Multiply_AD02ED7B_Out_2);
			float4 _Property_6D197672_Out_0 = _ShadedBaseColor;
			float4 _SampleTexture2D_34761939_RGBA_0 = SAMPLE_TEXTURE2D(_ShadedBaseMap, sampler_ShadedBaseMap, IN.uv0.xy);
			float _SampleTexture2D_34761939_R_4 = _SampleTexture2D_34761939_RGBA_0.r;
			float _SampleTexture2D_34761939_G_5 = _SampleTexture2D_34761939_RGBA_0.g;
			float _SampleTexture2D_34761939_B_6 = _SampleTexture2D_34761939_RGBA_0.b;
			float _SampleTexture2D_34761939_A_7 = _SampleTexture2D_34761939_RGBA_0.a;
			float4 _Multiply_CAC434DC_Out_2;
			Unity_Multiply_float(_Property_6D197672_Out_0, _SampleTexture2D_34761939_RGBA_0, _Multiply_CAC434DC_Out_2);
			float4 _Property_6C34BDFC_Out_0 = _Specular;
			float _Property_3F292CE9_Out_0 = _Smoothness;
			float4 _SampleTexture2D_D7A6F0AB_RGBA_0 = SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, IN.uv0.xy);
			_SampleTexture2D_D7A6F0AB_RGBA_0.rgb = UnpackNormalmapRGorAG(_SampleTexture2D_D7A6F0AB_RGBA_0);
			float _SampleTexture2D_D7A6F0AB_R_4 = _SampleTexture2D_D7A6F0AB_RGBA_0.r;
			float _SampleTexture2D_D7A6F0AB_G_5 = _SampleTexture2D_D7A6F0AB_RGBA_0.g;
			float _SampleTexture2D_D7A6F0AB_B_6 = _SampleTexture2D_D7A6F0AB_RGBA_0.b;
			float _SampleTexture2D_D7A6F0AB_A_7 = _SampleTexture2D_D7A6F0AB_RGBA_0.a;
			float _Property_91FF9194_Out_0 = _Occlusion;
			float _Property_2E5633FC_Out_0 = _DiffuseStep;
			float _Property_2BE42D52_Out_0 = _DiffuseFallOff;
			float _Property_D538AAD0_Out_0 = _SpecularStep;
			float _Property_2A792309_Out_0 = _SpecularFallOff;
			float _Property_7BB7BFBC_Out_0 = _ShadowFallOff;
			float _Property_FD04C19D_Out_0 = _RimPower;
			float _Property_179009DB_Out_0 = _RimFallOff;
			float4 _Property_A90FCED5_Out_0 = _RimColor;
			float _Property_F4C1F8F3_Out_0 = _RimAttenuation;
			float4 _UV_4E203FAD_Out_0 = IN.uv1;
			float Boolean_7A0C6EC7 = 1;
			float Boolean_ADA6D057 = 1;
			float Boolean_F162211B = 1;
			float Boolean_2D0C1B91 = 0;
			float Boolean_3141EC09 = 0;
			Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7 _LuxLWRPToonLighting_56B90218;
			_LuxLWRPToonLighting_56B90218.WorldSpaceNormal = IN.WorldSpaceNormal;
			_LuxLWRPToonLighting_56B90218.WorldSpaceTangent = IN.WorldSpaceTangent;
			_LuxLWRPToonLighting_56B90218.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
			_LuxLWRPToonLighting_56B90218.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
			_LuxLWRPToonLighting_56B90218.WorldSpacePosition = IN.WorldSpacePosition;
			float3 _LuxLWRPToonLighting_56B90218_FinalLighting_1;
			float3 _LuxLWRPToonLighting_56B90218_MetaAlbedo_2;
			float3 _LuxLWRPToonLighting_56B90218_MetaSpecular_3;
			SG_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7((_Multiply_AD02ED7B_Out_2.xyz), (_Multiply_CAC434DC_Out_2.xyz), _Property_6C34BDFC_Out_0, _Property_3F292CE9_Out_0, (_SampleTexture2D_D7A6F0AB_RGBA_0.xyz), _Property_91FF9194_Out_0, _Property_2E5633FC_Out_0, _Property_2BE42D52_Out_0, _Property_D538AAD0_Out_0, _Property_2A792309_Out_0, _Property_7BB7BFBC_Out_0, _Property_FD04C19D_Out_0, _Property_179009DB_Out_0, _Property_A90FCED5_Out_0, _Property_F4C1F8F3_Out_0, (_UV_4E203FAD_Out_0.xy), Boolean_7A0C6EC7, Boolean_ADA6D057, Boolean_F162211B, Boolean_2D0C1B91, Boolean_3141EC09, _LuxLWRPToonLighting_56B90218, _LuxLWRPToonLighting_56B90218_FinalLighting_1, _LuxLWRPToonLighting_56B90218_MetaAlbedo_2, _LuxLWRPToonLighting_56B90218_MetaSpecular_3);
			surface.Albedo = _LuxLWRPToonLighting_56B90218_MetaAlbedo_2;
			surface.Emission = _LuxLWRPToonLighting_56B90218_FinalLighting_1;
			surface.Alpha = 1;
			surface.AlphaClipThreshold = 0;
			return surface;
		}

		struct GraphVertexInput
		{
			float4 vertex : POSITION;
			float3 normal : NORMAL;
			float4 tangent : TANGENT;
			float4 texcoord0 : TEXCOORD0;
			float4 texcoord1 : TEXCOORD1;
			UNITY_VERTEX_INPUT_INSTANCE_ID
		};


		struct VertexOutput
		{
			float2 uv           : TEXCOORD0;
			float4 clipPos      : SV_POSITION;
			// Interpolators defined by graph
			float3 WorldSpacePosition : TEXCOORD3;
			float3 WorldSpaceNormal : TEXCOORD4;
			float3 WorldSpaceTangent : TEXCOORD5;
			float3 WorldSpaceBiTangent : TEXCOORD6;
			float3 WorldSpaceViewDirection : TEXCOORD7;
			half4 uv0 : TEXCOORD8;
			half4 uv1 : TEXCOORD9;

			UNITY_VERTEX_INPUT_INSTANCE_ID
			UNITY_VERTEX_OUTPUT_STEREO
		};

		VertexOutput vert(GraphVertexInput v)
		{
			VertexOutput o = (VertexOutput)0;
			UNITY_SETUP_INSTANCE_ID(v);
			UNITY_TRANSFER_INSTANCE_ID(v, o);
			UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

			// Vertex transformations performed by graph
			float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
			float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
			float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
			float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
			float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
			float4 uv0 = v.texcoord0;
			float4 uv1 = v.texcoord1;
			float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

			VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

			// Vertex description inputs defined by graph
			vdi.ObjectSpacePosition = ObjectSpacePosition;

			VertexDescription vd = PopulateVertexData(vdi);
			v.vertex.xyz = vd.Position;

			// Vertex shader outputs defined by graph
			o.WorldSpacePosition = WorldSpacePosition;
			o.WorldSpaceNormal = WorldSpaceNormal;
			o.WorldSpaceTangent = WorldSpaceTangent;
			o.WorldSpaceBiTangent = WorldSpaceBiTangent;
			o.WorldSpaceViewDirection = WorldSpaceViewDirection;
			o.uv0 = uv0;
			o.uv1 = uv1;

			o.clipPos = TransformObjectToHClip(v.vertex.xyz);
			return o;
		}

		half4 frag(VertexOutput IN) : SV_TARGET
		{
			UNITY_SETUP_INSTANCE_ID(IN);
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

			// Pixel transformations performed by graph
			float3 WorldSpacePosition = IN.WorldSpacePosition;
			float3 WorldSpaceNormal = IN.WorldSpaceNormal;
			float3 WorldSpaceTangent = IN.WorldSpaceTangent;
			float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
			float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
			float4 uv0 = IN.uv0;
			float4 uv1 = IN.uv1;
			float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

			SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

			// Surface description inputs defined by graph
			surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
			surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
			surfaceInput.WorldSpaceTangent = WorldSpaceTangent;
			surfaceInput.WorldSpaceBiTangent = WorldSpaceBiTangent;
			surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
			surfaceInput.WorldSpacePosition = WorldSpacePosition;
			surfaceInput.uv0 = uv0;
			surfaceInput.uv1 = uv1;

			SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

			float3 Albedo = float3(0.5, 0.5, 0.5);
			float3 Emission = 0;
			float Alpha = 1;
			float AlphaClipThreshold = 0;

			// Surface description remap performed by graph
			Albedo = surf.Albedo;
			Emission = surf.Emission;
			Alpha = surf.Alpha;
			AlphaClipThreshold = surf.AlphaClipThreshold;

	 #if _AlphaClip
			clip(Alpha - AlphaClipThreshold);
	#endif
			return 0;
		}
		ENDHLSL
	}

		// This pass it not used during regular rendering, only for lightmap baking.
		Pass
		{
			Name "Meta"
			Tags{"LightMode" = "Meta"}

			Cull Off

			HLSLPROGRAM
			// Required to compile gles 2.0 with standard srp library
			#pragma prefer_hlslcc gles
			#pragma exclude_renderers d3d11_9x
			#pragma target 2.0

			#pragma vertex vert
			#pragma fragment frag

			float4 _MainTex_ST;

		// Defines generated by graph
		#define _SPECULAR_SETUP 1

		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/MetaInput.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

		#pragma shader_feature _ _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A

			CBUFFER_START(UnityPerMaterial)
		float4 _BaseColor;
		float4 _ShadedBaseColor;
		float4 _Specular;
		float _Smoothness;
		float _Occlusion;
		float _DiffuseStep;
		float _DiffuseFallOff;
		float _SpecularStep;
		float _SpecularFallOff;
		float _ShadowFallOff;
		float _RimPower;
		float _RimFallOff;
		float4 _RimColor;
		float _RimAttenuation;
		CBUFFER_END

		TEXTURE2D(_BaseMap); SAMPLER(sampler_BaseMap); float4 _BaseMap_TexelSize;
		TEXTURE2D(_ShadedBaseMap); SAMPLER(sampler_ShadedBaseMap); float4 _ShadedBaseMap_TexelSize;
		TEXTURE2D(_BumpMap); SAMPLER(sampler_BumpMap); float4 _BumpMap_TexelSize;
		SAMPLER(_SampleTexture2D_FAA120A5_Sampler_3_Linear_Repeat);
		SAMPLER(_SampleTexture2D_34761939_Sampler_3_Linear_Repeat);
		SAMPLER(_SampleTexture2D_D7A6F0AB_Sampler_3_Linear_Repeat);
		struct VertexDescriptionInputs
		{
			float3 ObjectSpacePosition;
		};

		struct SurfaceDescriptionInputs
		{
			float3 WorldSpaceNormal;
			float3 TangentSpaceNormal;
			float3 WorldSpaceTangent;
			float3 WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection;
			float3 WorldSpacePosition;
			half4 uv0;
			half4 uv1;
		};


		void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
		{
			Out = A * B;
		}

		// 380c0ca044f14a16d46af7529bdff7bf
		#include "Assets/Lux LWRP Essentials/Shader Graphs/Includes/Lux_Lighting_Toon.hlsl"

		struct Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7
		{
			float3 WorldSpaceNormal;
			float3 WorldSpaceTangent;
			float3 WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection;
			float3 WorldSpacePosition;
		};

		void SG_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7(float3 Vector3_4CA515A4, float3 Vector3_AE241B6C, float4 Color_5426B4B9, float Vector1_D80CA667, float3 Vector3_FFC51F17, float Vector1_3CC2759F, float Vector1_3EC09F1, float Vector1_7D925674, float Vector1_B000244B, float Vector1_4DCF7CEB, float Vector1_D1304BAC, float Vector1_B5087B5E, float Vector1_5A724280, float4 Color_523B3039, float Vector1_B05024D, float2 Vector2_2C223C8B, float Boolean_7F14ACEC, float Boolean_5F39E5C1, float Boolean_83E728FB, float Boolean_C51AC2E9, float Boolean_58D07EF3, Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7 IN, out float3 FinalLighting, out float3 MetaAlbedo, out float3 MetaSpecular)
		{
			float _Property_BB4B7CD6_Out_0 = Boolean_5F39E5C1;
			float3 _Property_D1F66200_Out_0 = Vector3_FFC51F17;
			float3 _Property_403E22D6_Out_0 = Vector3_4CA515A4;
			float3 _Property_825F2A6F_Out_0 = Vector3_AE241B6C;
			float _Property_289EBB8C_Out_0 = Boolean_7F14ACEC;
			float4 _Property_CF9BFC0B_Out_0 = Color_5426B4B9;
			float _Property_A136356D_Out_0 = Vector1_D80CA667;
			float _Property_B73A1CC4_Out_0 = Vector1_3CC2759F;
			float _Property_DE78F476_Out_0 = Vector1_3EC09F1;
			float _Property_197F1F5F_Out_0 = Vector1_7D925674;
			float _Property_B73AA6B5_Out_0 = Vector1_B000244B;
			float _Property_D8401519_Out_0 = Vector1_4DCF7CEB;
			float _Property_A938B7C7_Out_0 = Vector1_D1304BAC;
			float _Property_9A9EABFC_Out_0 = Boolean_C51AC2E9;
			float _Property_D34BBBE6_Out_0 = Boolean_58D07EF3;
			float _Property_E71DCEAF_Out_0 = Boolean_83E728FB;
			float _Property_8F3DAD18_Out_0 = Vector1_B5087B5E;
			float _Property_DCD83B72_Out_0 = Vector1_5A724280;
			float4 _Property_C69A493B_Out_0 = Color_523B3039;
			float _Property_49DE119F_Out_0 = Vector1_B05024D;
			float2 _Property_5CBDCB9_Out_0 = Vector2_2C223C8B;
			float3 _CustomFunction_4F540784_FinalLighting_7;
			float3 _CustomFunction_4F540784_MetaAlbedo_21;
			float3 _CustomFunction_4F540784_MetaSpecular_28;
			Lighting_float(IN.WorldSpacePosition, IN.WorldSpaceViewDirection, IN.WorldSpaceNormal, IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, _Property_BB4B7CD6_Out_0, _Property_D1F66200_Out_0, _Property_403E22D6_Out_0, _Property_825F2A6F_Out_0, _Property_289EBB8C_Out_0, (_Property_CF9BFC0B_Out_0.xyz), _Property_A136356D_Out_0, _Property_B73A1CC4_Out_0, _Property_DE78F476_Out_0, _Property_197F1F5F_Out_0, _Property_B73AA6B5_Out_0, _Property_D8401519_Out_0, _Property_A938B7C7_Out_0, _Property_9A9EABFC_Out_0, _Property_D34BBBE6_Out_0, _Property_E71DCEAF_Out_0, _Property_8F3DAD18_Out_0, _Property_DCD83B72_Out_0, _Property_C69A493B_Out_0, _Property_49DE119F_Out_0, _Property_5CBDCB9_Out_0, _CustomFunction_4F540784_FinalLighting_7, _CustomFunction_4F540784_MetaAlbedo_21, _CustomFunction_4F540784_MetaSpecular_28);
			FinalLighting = _CustomFunction_4F540784_FinalLighting_7;
			MetaAlbedo = _CustomFunction_4F540784_MetaAlbedo_21;
			MetaSpecular = _CustomFunction_4F540784_MetaSpecular_28;
		}

		struct VertexDescription
		{
			float3 Position;
		};

		VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
		{
			VertexDescription description = (VertexDescription)0;
			description.Position = IN.ObjectSpacePosition;
			return description;
		}

		struct SurfaceDescription
		{
			float3 Albedo;
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
		};

		SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
		{
			SurfaceDescription surface = (SurfaceDescription)0;
			float4 _Property_B5961ACC_Out_0 = _BaseColor;
			float4 _SampleTexture2D_FAA120A5_RGBA_0 = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, IN.uv0.xy);
			float _SampleTexture2D_FAA120A5_R_4 = _SampleTexture2D_FAA120A5_RGBA_0.r;
			float _SampleTexture2D_FAA120A5_G_5 = _SampleTexture2D_FAA120A5_RGBA_0.g;
			float _SampleTexture2D_FAA120A5_B_6 = _SampleTexture2D_FAA120A5_RGBA_0.b;
			float _SampleTexture2D_FAA120A5_A_7 = _SampleTexture2D_FAA120A5_RGBA_0.a;
			float4 _Multiply_AD02ED7B_Out_2;
			Unity_Multiply_float(_Property_B5961ACC_Out_0, _SampleTexture2D_FAA120A5_RGBA_0, _Multiply_AD02ED7B_Out_2);
			float4 _Property_6D197672_Out_0 = _ShadedBaseColor;
			float4 _SampleTexture2D_34761939_RGBA_0 = SAMPLE_TEXTURE2D(_ShadedBaseMap, sampler_ShadedBaseMap, IN.uv0.xy);
			float _SampleTexture2D_34761939_R_4 = _SampleTexture2D_34761939_RGBA_0.r;
			float _SampleTexture2D_34761939_G_5 = _SampleTexture2D_34761939_RGBA_0.g;
			float _SampleTexture2D_34761939_B_6 = _SampleTexture2D_34761939_RGBA_0.b;
			float _SampleTexture2D_34761939_A_7 = _SampleTexture2D_34761939_RGBA_0.a;
			float4 _Multiply_CAC434DC_Out_2;
			Unity_Multiply_float(_Property_6D197672_Out_0, _SampleTexture2D_34761939_RGBA_0, _Multiply_CAC434DC_Out_2);
			float4 _Property_6C34BDFC_Out_0 = _Specular;
			float _Property_3F292CE9_Out_0 = _Smoothness;
			float4 _SampleTexture2D_D7A6F0AB_RGBA_0 = SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, IN.uv0.xy);
			_SampleTexture2D_D7A6F0AB_RGBA_0.rgb = UnpackNormalmapRGorAG(_SampleTexture2D_D7A6F0AB_RGBA_0);
			float _SampleTexture2D_D7A6F0AB_R_4 = _SampleTexture2D_D7A6F0AB_RGBA_0.r;
			float _SampleTexture2D_D7A6F0AB_G_5 = _SampleTexture2D_D7A6F0AB_RGBA_0.g;
			float _SampleTexture2D_D7A6F0AB_B_6 = _SampleTexture2D_D7A6F0AB_RGBA_0.b;
			float _SampleTexture2D_D7A6F0AB_A_7 = _SampleTexture2D_D7A6F0AB_RGBA_0.a;
			float _Property_91FF9194_Out_0 = _Occlusion;
			float _Property_2E5633FC_Out_0 = _DiffuseStep;
			float _Property_2BE42D52_Out_0 = _DiffuseFallOff;
			float _Property_D538AAD0_Out_0 = _SpecularStep;
			float _Property_2A792309_Out_0 = _SpecularFallOff;
			float _Property_7BB7BFBC_Out_0 = _ShadowFallOff;
			float _Property_FD04C19D_Out_0 = _RimPower;
			float _Property_179009DB_Out_0 = _RimFallOff;
			float4 _Property_A90FCED5_Out_0 = _RimColor;
			float _Property_F4C1F8F3_Out_0 = _RimAttenuation;
			float4 _UV_4E203FAD_Out_0 = IN.uv1;
			float Boolean_7A0C6EC7 = 1;
			float Boolean_ADA6D057 = 1;
			float Boolean_F162211B = 1;
			float Boolean_2D0C1B91 = 0;
			float Boolean_3141EC09 = 0;
			Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7 _LuxLWRPToonLighting_56B90218;
			_LuxLWRPToonLighting_56B90218.WorldSpaceNormal = IN.WorldSpaceNormal;
			_LuxLWRPToonLighting_56B90218.WorldSpaceTangent = IN.WorldSpaceTangent;
			_LuxLWRPToonLighting_56B90218.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
			_LuxLWRPToonLighting_56B90218.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
			_LuxLWRPToonLighting_56B90218.WorldSpacePosition = IN.WorldSpacePosition;
			float3 _LuxLWRPToonLighting_56B90218_FinalLighting_1;
			float3 _LuxLWRPToonLighting_56B90218_MetaAlbedo_2;
			float3 _LuxLWRPToonLighting_56B90218_MetaSpecular_3;
			SG_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7((_Multiply_AD02ED7B_Out_2.xyz), (_Multiply_CAC434DC_Out_2.xyz), _Property_6C34BDFC_Out_0, _Property_3F292CE9_Out_0, (_SampleTexture2D_D7A6F0AB_RGBA_0.xyz), _Property_91FF9194_Out_0, _Property_2E5633FC_Out_0, _Property_2BE42D52_Out_0, _Property_D538AAD0_Out_0, _Property_2A792309_Out_0, _Property_7BB7BFBC_Out_0, _Property_FD04C19D_Out_0, _Property_179009DB_Out_0, _Property_A90FCED5_Out_0, _Property_F4C1F8F3_Out_0, (_UV_4E203FAD_Out_0.xy), Boolean_7A0C6EC7, Boolean_ADA6D057, Boolean_F162211B, Boolean_2D0C1B91, Boolean_3141EC09, _LuxLWRPToonLighting_56B90218, _LuxLWRPToonLighting_56B90218_FinalLighting_1, _LuxLWRPToonLighting_56B90218_MetaAlbedo_2, _LuxLWRPToonLighting_56B90218_MetaSpecular_3);
			surface.Albedo = _LuxLWRPToonLighting_56B90218_MetaAlbedo_2;
			surface.Emission = _LuxLWRPToonLighting_56B90218_FinalLighting_1;
			surface.Alpha = 1;
			surface.AlphaClipThreshold = 0;
			return surface;
		}

		struct GraphVertexInput
		{
			float4 vertex : POSITION;
			float3 normal : NORMAL;
			float4 tangent : TANGENT;
			float4 texcoord0 : TEXCOORD0;
			float4 texcoord1 : TEXCOORD1;
			UNITY_VERTEX_INPUT_INSTANCE_ID
		};


		struct VertexOutput
		{
			float2 uv           : TEXCOORD0;
			float4 clipPos      : SV_POSITION;
			// Interpolators defined by graph
			float3 WorldSpacePosition : TEXCOORD3;
			float3 WorldSpaceNormal : TEXCOORD4;
			float3 WorldSpaceTangent : TEXCOORD5;
			float3 WorldSpaceBiTangent : TEXCOORD6;
			float3 WorldSpaceViewDirection : TEXCOORD7;
			half4 uv0 : TEXCOORD8;
			half4 uv1 : TEXCOORD9;

			UNITY_VERTEX_INPUT_INSTANCE_ID
			UNITY_VERTEX_OUTPUT_STEREO
		};

		VertexOutput vert(GraphVertexInput v)
		{
			VertexOutput o = (VertexOutput)0;
			UNITY_SETUP_INSTANCE_ID(v);
			UNITY_TRANSFER_INSTANCE_ID(v, o);
			UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

			// Vertex transformations performed by graph
			float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
			float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
			float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
			float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
			float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
			float4 uv0 = v.texcoord0;
			float4 uv1 = v.texcoord1;
			float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;


			// Vertex shader outputs defined by graph
			o.WorldSpacePosition = WorldSpacePosition;
			o.WorldSpaceNormal = WorldSpaceNormal;
			o.WorldSpaceTangent = WorldSpaceTangent;
			o.WorldSpaceBiTangent = WorldSpaceBiTangent;
			o.WorldSpaceViewDirection = WorldSpaceViewDirection;
			o.uv0 = uv0;
			o.uv1 = uv1;

			o.clipPos = MetaVertexPosition(v.vertex, uv1, uv1, unity_LightmapST, unity_DynamicLightmapST);
			return o;
		}

		half4 frag(VertexOutput IN) : SV_TARGET
		{
			UNITY_SETUP_INSTANCE_ID(IN);
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

			// Pixel transformations performed by graph
			float3 WorldSpacePosition = IN.WorldSpacePosition;
			float3 WorldSpaceNormal = IN.WorldSpaceNormal;
			float3 WorldSpaceTangent = IN.WorldSpaceTangent;
			float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
			float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
			float4 uv0 = IN.uv0;
			float4 uv1 = IN.uv1;
			float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

			SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

			// Surface description inputs defined by graph
			surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
			surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
			surfaceInput.WorldSpaceTangent = WorldSpaceTangent;
			surfaceInput.WorldSpaceBiTangent = WorldSpaceBiTangent;
			surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
			surfaceInput.WorldSpacePosition = WorldSpacePosition;
			surfaceInput.uv0 = uv0;
			surfaceInput.uv1 = uv1;

			SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

			float3 Albedo = float3(0.5, 0.5, 0.5);
			float3 Emission = 0;
			float Alpha = 1;
			float AlphaClipThreshold = 0;

			// Surface description remap performed by graph
			Albedo = surf.Albedo;
			Emission = surf.Emission;
			Alpha = surf.Alpha;
			AlphaClipThreshold = surf.AlphaClipThreshold;

	 #if _AlphaClip
			clip(Alpha - AlphaClipThreshold);
	#endif

			MetaInput metaInput = (MetaInput)0;
			metaInput.Albedo = Albedo;
			metaInput.Emission = Emission;

			return MetaFragment(metaInput);
		}
		ENDHLSL
	}
	Pass
	{
		Tags{"LightMode" = "Lightweight2D"}

		// Material options generated by graph

		Blend One Zero, One Zero

		Cull Back

		ZTest LEqual

		ZWrite On

		HLSLPROGRAM
			// Required to compile gles 2.0 with standard srp library
			#pragma enable_d3d11_debug_symbols
			#pragma prefer_hlslcc gles
			#pragma exclude_renderers d3d11_9x
			#pragma target 2.0

			#pragma vertex vert
			#pragma fragment frag

			// Defines generated by graph
			#define _SPECULAR_SETUP 1

			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"

			CBUFFER_START(UnityPerMaterial)
			float4 _BaseColor;
			float4 _ShadedBaseColor;
			float4 _Specular;
			float _Smoothness;
			float _Occlusion;
			float _DiffuseStep;
			float _DiffuseFallOff;
			float _SpecularStep;
			float _SpecularFallOff;
			float _ShadowFallOff;
			float _RimPower;
			float _RimFallOff;
			float4 _RimColor;
			float _RimAttenuation;
			CBUFFER_END

			TEXTURE2D(_BaseMap); SAMPLER(sampler_BaseMap); float4 _BaseMap_TexelSize;
			TEXTURE2D(_ShadedBaseMap); SAMPLER(sampler_ShadedBaseMap); float4 _ShadedBaseMap_TexelSize;
			TEXTURE2D(_BumpMap); SAMPLER(sampler_BumpMap); float4 _BumpMap_TexelSize;
			SAMPLER(_SampleTexture2D_FAA120A5_Sampler_3_Linear_Repeat);
			SAMPLER(_SampleTexture2D_34761939_Sampler_3_Linear_Repeat);
			SAMPLER(_SampleTexture2D_D7A6F0AB_Sampler_3_Linear_Repeat);
			struct VertexDescriptionInputs
			{
				float3 ObjectSpacePosition;
			};

			struct SurfaceDescriptionInputs
			{
				float3 WorldSpaceNormal;
				float3 TangentSpaceNormal;
				float3 WorldSpaceTangent;
				float3 WorldSpaceBiTangent;
				float3 WorldSpaceViewDirection;
				float3 WorldSpacePosition;
				half4 uv0;
				half4 uv1;
			};


			void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
			{
				Out = A * B;
			}

			// 380c0ca044f14a16d46af7529bdff7bf
			#include "Assets/Lux LWRP Essentials/Shader Graphs/Includes/Lux_Lighting_Toon.hlsl"

			struct Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7
			{
				float3 WorldSpaceNormal;
				float3 WorldSpaceTangent;
				float3 WorldSpaceBiTangent;
				float3 WorldSpaceViewDirection;
				float3 WorldSpacePosition;
			};

			void SG_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7(float3 Vector3_4CA515A4, float3 Vector3_AE241B6C, float4 Color_5426B4B9, float Vector1_D80CA667, float3 Vector3_FFC51F17, float Vector1_3CC2759F, float Vector1_3EC09F1, float Vector1_7D925674, float Vector1_B000244B, float Vector1_4DCF7CEB, float Vector1_D1304BAC, float Vector1_B5087B5E, float Vector1_5A724280, float4 Color_523B3039, float Vector1_B05024D, float2 Vector2_2C223C8B, float Boolean_7F14ACEC, float Boolean_5F39E5C1, float Boolean_83E728FB, float Boolean_C51AC2E9, float Boolean_58D07EF3, Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7 IN, out float3 FinalLighting, out float3 MetaAlbedo, out float3 MetaSpecular)
			{
				float _Property_BB4B7CD6_Out_0 = Boolean_5F39E5C1;
				float3 _Property_D1F66200_Out_0 = Vector3_FFC51F17;
				float3 _Property_403E22D6_Out_0 = Vector3_4CA515A4;
				float3 _Property_825F2A6F_Out_0 = Vector3_AE241B6C;
				float _Property_289EBB8C_Out_0 = Boolean_7F14ACEC;
				float4 _Property_CF9BFC0B_Out_0 = Color_5426B4B9;
				float _Property_A136356D_Out_0 = Vector1_D80CA667;
				float _Property_B73A1CC4_Out_0 = Vector1_3CC2759F;
				float _Property_DE78F476_Out_0 = Vector1_3EC09F1;
				float _Property_197F1F5F_Out_0 = Vector1_7D925674;
				float _Property_B73AA6B5_Out_0 = Vector1_B000244B;
				float _Property_D8401519_Out_0 = Vector1_4DCF7CEB;
				float _Property_A938B7C7_Out_0 = Vector1_D1304BAC;
				float _Property_9A9EABFC_Out_0 = Boolean_C51AC2E9;
				float _Property_D34BBBE6_Out_0 = Boolean_58D07EF3;
				float _Property_E71DCEAF_Out_0 = Boolean_83E728FB;
				float _Property_8F3DAD18_Out_0 = Vector1_B5087B5E;
				float _Property_DCD83B72_Out_0 = Vector1_5A724280;
				float4 _Property_C69A493B_Out_0 = Color_523B3039;
				float _Property_49DE119F_Out_0 = Vector1_B05024D;
				float2 _Property_5CBDCB9_Out_0 = Vector2_2C223C8B;
				float3 _CustomFunction_4F540784_FinalLighting_7;
				float3 _CustomFunction_4F540784_MetaAlbedo_21;
				float3 _CustomFunction_4F540784_MetaSpecular_28;
				Lighting_float(IN.WorldSpacePosition, IN.WorldSpaceViewDirection, IN.WorldSpaceNormal, IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, _Property_BB4B7CD6_Out_0, _Property_D1F66200_Out_0, _Property_403E22D6_Out_0, _Property_825F2A6F_Out_0, _Property_289EBB8C_Out_0, (_Property_CF9BFC0B_Out_0.xyz), _Property_A136356D_Out_0, _Property_B73A1CC4_Out_0, _Property_DE78F476_Out_0, _Property_197F1F5F_Out_0, _Property_B73AA6B5_Out_0, _Property_D8401519_Out_0, _Property_A938B7C7_Out_0, _Property_9A9EABFC_Out_0, _Property_D34BBBE6_Out_0, _Property_E71DCEAF_Out_0, _Property_8F3DAD18_Out_0, _Property_DCD83B72_Out_0, _Property_C69A493B_Out_0, _Property_49DE119F_Out_0, _Property_5CBDCB9_Out_0, _CustomFunction_4F540784_FinalLighting_7, _CustomFunction_4F540784_MetaAlbedo_21, _CustomFunction_4F540784_MetaSpecular_28);
				FinalLighting = _CustomFunction_4F540784_FinalLighting_7;
				MetaAlbedo = _CustomFunction_4F540784_MetaAlbedo_21;
				MetaSpecular = _CustomFunction_4F540784_MetaSpecular_28;
			}

			struct VertexDescription
			{
				float3 Position;
			};

			VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				description.Position = IN.ObjectSpacePosition;
				return description;
			}

			struct SurfaceDescription
			{
				float3 Albedo;
				float3 Normal;
				float3 Emission;
				float3 Specular;
				float Smoothness;
				float Occlusion;
				float Alpha;
				float AlphaClipThreshold;
			};

			SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				float4 _Property_B5961ACC_Out_0 = _BaseColor;
				float4 _SampleTexture2D_FAA120A5_RGBA_0 = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, IN.uv0.xy);
				float _SampleTexture2D_FAA120A5_R_4 = _SampleTexture2D_FAA120A5_RGBA_0.r;
				float _SampleTexture2D_FAA120A5_G_5 = _SampleTexture2D_FAA120A5_RGBA_0.g;
				float _SampleTexture2D_FAA120A5_B_6 = _SampleTexture2D_FAA120A5_RGBA_0.b;
				float _SampleTexture2D_FAA120A5_A_7 = _SampleTexture2D_FAA120A5_RGBA_0.a;
				float4 _Multiply_AD02ED7B_Out_2;
				Unity_Multiply_float(_Property_B5961ACC_Out_0, _SampleTexture2D_FAA120A5_RGBA_0, _Multiply_AD02ED7B_Out_2);
				float4 _Property_6D197672_Out_0 = _ShadedBaseColor;
				float4 _SampleTexture2D_34761939_RGBA_0 = SAMPLE_TEXTURE2D(_ShadedBaseMap, sampler_ShadedBaseMap, IN.uv0.xy);
				float _SampleTexture2D_34761939_R_4 = _SampleTexture2D_34761939_RGBA_0.r;
				float _SampleTexture2D_34761939_G_5 = _SampleTexture2D_34761939_RGBA_0.g;
				float _SampleTexture2D_34761939_B_6 = _SampleTexture2D_34761939_RGBA_0.b;
				float _SampleTexture2D_34761939_A_7 = _SampleTexture2D_34761939_RGBA_0.a;
				float4 _Multiply_CAC434DC_Out_2;
				Unity_Multiply_float(_Property_6D197672_Out_0, _SampleTexture2D_34761939_RGBA_0, _Multiply_CAC434DC_Out_2);
				float4 _Property_6C34BDFC_Out_0 = _Specular;
				float _Property_3F292CE9_Out_0 = _Smoothness;
				float4 _SampleTexture2D_D7A6F0AB_RGBA_0 = SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, IN.uv0.xy);
				_SampleTexture2D_D7A6F0AB_RGBA_0.rgb = UnpackNormalmapRGorAG(_SampleTexture2D_D7A6F0AB_RGBA_0);
				float _SampleTexture2D_D7A6F0AB_R_4 = _SampleTexture2D_D7A6F0AB_RGBA_0.r;
				float _SampleTexture2D_D7A6F0AB_G_5 = _SampleTexture2D_D7A6F0AB_RGBA_0.g;
				float _SampleTexture2D_D7A6F0AB_B_6 = _SampleTexture2D_D7A6F0AB_RGBA_0.b;
				float _SampleTexture2D_D7A6F0AB_A_7 = _SampleTexture2D_D7A6F0AB_RGBA_0.a;
				float _Property_91FF9194_Out_0 = _Occlusion;
				float _Property_2E5633FC_Out_0 = _DiffuseStep;
				float _Property_2BE42D52_Out_0 = _DiffuseFallOff;
				float _Property_D538AAD0_Out_0 = _SpecularStep;
				float _Property_2A792309_Out_0 = _SpecularFallOff;
				float _Property_7BB7BFBC_Out_0 = _ShadowFallOff;
				float _Property_FD04C19D_Out_0 = _RimPower;
				float _Property_179009DB_Out_0 = _RimFallOff;
				float4 _Property_A90FCED5_Out_0 = _RimColor;
				float _Property_F4C1F8F3_Out_0 = _RimAttenuation;
				float4 _UV_4E203FAD_Out_0 = IN.uv1;
				float Boolean_7A0C6EC7 = 1;
				float Boolean_ADA6D057 = 1;
				float Boolean_F162211B = 1;
				float Boolean_2D0C1B91 = 0;
				float Boolean_3141EC09 = 0;
				Bindings_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7 _LuxLWRPToonLighting_56B90218;
				_LuxLWRPToonLighting_56B90218.WorldSpaceNormal = IN.WorldSpaceNormal;
				_LuxLWRPToonLighting_56B90218.WorldSpaceTangent = IN.WorldSpaceTangent;
				_LuxLWRPToonLighting_56B90218.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
				_LuxLWRPToonLighting_56B90218.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
				_LuxLWRPToonLighting_56B90218.WorldSpacePosition = IN.WorldSpacePosition;
				float3 _LuxLWRPToonLighting_56B90218_FinalLighting_1;
				float3 _LuxLWRPToonLighting_56B90218_MetaAlbedo_2;
				float3 _LuxLWRPToonLighting_56B90218_MetaSpecular_3;
				SG_LuxLWRPToonLighting_a9bc6aab40d8d457fb85c77810509fb7((_Multiply_AD02ED7B_Out_2.xyz), (_Multiply_CAC434DC_Out_2.xyz), _Property_6C34BDFC_Out_0, _Property_3F292CE9_Out_0, (_SampleTexture2D_D7A6F0AB_RGBA_0.xyz), _Property_91FF9194_Out_0, _Property_2E5633FC_Out_0, _Property_2BE42D52_Out_0, _Property_D538AAD0_Out_0, _Property_2A792309_Out_0, _Property_7BB7BFBC_Out_0, _Property_FD04C19D_Out_0, _Property_179009DB_Out_0, _Property_A90FCED5_Out_0, _Property_F4C1F8F3_Out_0, (_UV_4E203FAD_Out_0.xy), Boolean_7A0C6EC7, Boolean_ADA6D057, Boolean_F162211B, Boolean_2D0C1B91, Boolean_3141EC09, _LuxLWRPToonLighting_56B90218, _LuxLWRPToonLighting_56B90218_FinalLighting_1, _LuxLWRPToonLighting_56B90218_MetaAlbedo_2, _LuxLWRPToonLighting_56B90218_MetaSpecular_3);
				surface.Albedo = _LuxLWRPToonLighting_56B90218_MetaAlbedo_2;
				surface.Normal = IN.TangentSpaceNormal;
				surface.Emission = _LuxLWRPToonLighting_56B90218_FinalLighting_1;
				surface.Specular = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
				surface.Smoothness = 0;
				surface.Occlusion = 0;
				surface.Alpha = 1;
				surface.AlphaClipThreshold = 0;
				return surface;
			}

			struct GraphVertexInput
			{
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 tangent : TANGENT;
				float4 texcoord0 : TEXCOORD0;
				float4 texcoord1 : TEXCOORD1;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};


			struct GraphVertexOutput
			{
				float4 clipPos                : SV_POSITION;
				// Interpolators defined by graph
				float3 WorldSpacePosition : TEXCOORD3;
				float3 WorldSpaceNormal : TEXCOORD4;
				float3 WorldSpaceTangent : TEXCOORD5;
				float3 WorldSpaceBiTangent : TEXCOORD6;
				float3 WorldSpaceViewDirection : TEXCOORD7;
				half4 uv0 : TEXCOORD8;
				half4 uv1 : TEXCOORD9;

			};

			GraphVertexOutput vert(GraphVertexInput v)
			{
				GraphVertexOutput o = (GraphVertexOutput)0;

				// Vertex transformations performed by graph
				float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
				float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
				float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
				float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
				float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
				float4 uv0 = v.texcoord0;
				float4 uv1 = v.texcoord1;
				float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

				VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

				// Vertex description inputs defined by graph
				vdi.ObjectSpacePosition = ObjectSpacePosition;

				VertexDescription vd = PopulateVertexData(vdi);
				v.vertex.xyz = vd.Position;

				// Vertex shader outputs defined by graph
				o.WorldSpacePosition = WorldSpacePosition;
				o.WorldSpaceNormal = WorldSpaceNormal;
				o.WorldSpaceTangent = WorldSpaceTangent;
				o.WorldSpaceBiTangent = WorldSpaceBiTangent;
				o.WorldSpaceViewDirection = WorldSpaceViewDirection;
				o.uv0 = uv0;
				o.uv1 = uv1;


				VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);
				o.clipPos = vertexInput.positionCS;

				return o;
			}

			half4 frag(GraphVertexOutput IN) : SV_Target
			{
				// Pixel transformations performed by graph
				float3 WorldSpacePosition = IN.WorldSpacePosition;
				float3 WorldSpaceNormal = IN.WorldSpaceNormal;
				float3 WorldSpaceTangent = IN.WorldSpaceTangent;
				float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
				float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
				float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
				float4 uv0 = IN.uv0;
				float4 uv1 = IN.uv1;
				float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

				SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

				// Surface description inputs defined by graph
				surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
				surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
				surfaceInput.WorldSpaceTangent = WorldSpaceTangent;
				surfaceInput.WorldSpaceBiTangent = WorldSpaceBiTangent;
				surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
				surfaceInput.WorldSpacePosition = WorldSpacePosition;
				surfaceInput.uv0 = uv0;
				surfaceInput.uv1 = uv1;

				SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

				float3 Albedo = float3(0.5, 0.5, 0.5);
				float3 Specular = float3(0, 0, 0);
				float Metallic = 1;
				float3 Normal = float3(0, 0, 1);
				float3 Emission = 0;
				float Smoothness = 0.5;
				float Occlusion = 1;
				float Alpha = 1;
				float AlphaClipThreshold = 0;

				// Surface description remap performed by graph
				Albedo = surf.Albedo;
				Normal = surf.Normal;
				Emission = surf.Emission;
				Specular = surf.Specular;
				Smoothness = surf.Smoothness;
				Occlusion = surf.Occlusion;
				Alpha = surf.Alpha;
				AlphaClipThreshold = surf.AlphaClipThreshold;


				// Computes fog factor per-vertex
				half4 color = half4(Albedo, Alpha);

		#if _AlphaClip
				clip(Alpha - AlphaClipThreshold);
		#endif
				return color;
			}

			ENDHLSL
		}
}
CustomEditor "UnityEditor.ShaderGraph.PBRMasterGUI"
FallBack "Hidden/InternalErrorShader"
}
